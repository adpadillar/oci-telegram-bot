version: 0.1
component: build
timeoutInSeconds: 1800
shell: bash
env:
  variables:
    # Información del Docker Registry
    DOCKER_REGISTRY: "${region-code}.ocir.io"
    NAMESPACE: "${namespace}"

    # Información del repositorio
    BACKEND_REPO: "${namespace}/todolistapp-springboot-backend"
    FRONTEND_REPO: "${namespace}/todolistapp-springboot-frontend"

    # Rutas a los Dockerfiles
    BACKEND_DOCKERFILE_PATH: "MtdrSpring/backend/Dockerfile"
    FRONTEND_DOCKERFILE_PATH: "MtdrSpring/frontend/Dockerfile"

    # Rutas a los directorios de construcción
    BACKEND_CONTEXT: "MtdrSpring/backend"
    FRONTEND_CONTEXT: "MtdrSpring/frontend"

  exportedVariables:
    - BACKEND_IMAGE_TAG
    - FRONTEND_IMAGE_TAG

steps:
  # Paso 1: Iniciar sesión en OCIR
  - type: Command
    name: "Iniciar sesión en OCIR"
    timeoutInSeconds: 60
    command: |
      echo "Iniciando sesión en OCIR..."
      echo "${OCIR_PASSWORD}" | docker login ${DOCKER_REGISTRY} -u "${NAMESPACE}/oracleidentitycloudservice/${OCIR_USER}" --password-stdin
    onFailure:
      - type: Command
        command: |
          echo "Error al iniciar sesión en OCIR"
          exit 1

  # Paso 2: Construir y publicar imagen de Backend
  - type: Command
    name: "Construir y publicar imagen de Backend"
    timeoutInSeconds: 600
    command: |
      echo "Construyendo imagen de backend..."
      cd ${OCI_PRIMARY_SOURCE_DIR}

      # Generar tag único para la imagen de backend
      export BACKEND_IMAGE_TAG="${DOCKER_REGISTRY}/${BACKEND_REPO}:${OCI_BUILD_RUN_ID}"
      echo "Tag para la imagen de backend: ${BACKEND_IMAGE_TAG}"

      # Construir la imagen
      docker build -t ${BACKEND_IMAGE_TAG} -f ${BACKEND_DOCKERFILE_PATH} ${BACKEND_CONTEXT}

      # Publicar la imagen
      docker push ${BACKEND_IMAGE_TAG}
      echo "Imagen de backend publicada: ${BACKEND_IMAGE_TAG}"
    onFailure:
      - type: Command
        command: |
          echo "Error al construir o publicar la imagen de backend"
          exit 1

  # Paso 3: Construir y publicar imagen de Frontend
  - type: Command
    name: "Construir y publicar imagen de Frontend"
    timeoutInSeconds: 600
    command: |
      echo "Construyendo imagen de frontend..."
      cd ${OCI_PRIMARY_SOURCE_DIR}

      # Generar tag único para la imagen de frontend
      export FRONTEND_IMAGE_TAG="${DOCKER_REGISTRY}/${FRONTEND_REPO}:${OCI_BUILD_RUN_ID}"
      echo "Tag para la imagen de frontend: ${FRONTEND_IMAGE_TAG}"

      # Crear nginx.conf si no existe
      NGINX_CONF_PATH="${FRONTEND_CONTEXT}/nginx.conf"
      if [ ! -f "${NGINX_CONF_PATH}" ]; then
        echo "Creando nginx.conf..."
        cp MtdrSpring/frontend/nginx.conf "${NGINX_CONF_PATH}"
      fi

      # Construir la imagen
      docker build -t ${FRONTEND_IMAGE_TAG} -f ${FRONTEND_DOCKERFILE_PATH} ${FRONTEND_CONTEXT}

      # Publicar la imagen
      docker push ${FRONTEND_IMAGE_TAG}
      echo "Imagen de frontend publicada: ${FRONTEND_IMAGE_TAG}"
    onFailure:
      - type: Command
        command: |
          echo "Error al construir o publicar la imagen de frontend"
          exit 1

  # Paso 4: Preparar archivo de despliegue de Kubernetes
  - type: Command
    name: "Preparar archivo de despliegue"
    timeoutInSeconds: 300
    command: |
      echo "Preparando archivo de despliegue..."
      cd ${OCI_PRIMARY_SOURCE_DIR}

      # Copiar el archivo de despliegue
      cp MtdrSpring/deployment.yaml deployment.yaml

      # Reemplazar los placeholders con las imágenes construidas
      sed -i "s|\${BACKEND_IMAGE}|${BACKEND_IMAGE_TAG}|g" deployment.yaml
      sed -i "s|\${FRONTEND_IMAGE}|${FRONTEND_IMAGE_TAG}|g" deployment.yaml

      echo "Archivo de despliegue preparado"
    onFailure:
      - type: Command
        command: |
          echo "Error al preparar el archivo de despliegue"
          exit 1

outputArtifacts:
  - name: deployment-manifest
    type: KUBERNETES_MANIFEST
    location: deployment.yaml
